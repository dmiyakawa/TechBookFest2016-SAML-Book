= Shibboleth IdP v3

== はじめに

ついにShibboleth IdP v3が発表されたと思ったら……2016年7月31日をもってShibboleth IdP v2のサポートを一切やめるというアナウンスまでついてきました。ちょっと驚きでした。本書は2016年6月25日のイベント向けに書かれていますが、そこから1ヶ月後となります。

Idp Version 3.0.0のリリースは2014年12月22日で、以後も設定の記法が変わるような修正がモリモリ、それなりに重大なバグも修正されたりして、執筆時点の最新 Version 3.2.1 は2015年12月19日リリース。3.2.1 は今のところ悪くない感じみたいですけれども、それにしても2年弱程度での入れ替えを企業や大学全体に強いるのは「強気だなぁ」と、遠目に見て思いました。

逆に言えば、今後はこのくらいの速度感でソフトウェア入れ替えを出来ないようなら、LinuxにShibboleth IdPを入れて自力でIdPを運用するのはNGな時代かもしれません。海外でIdPを持つ大学さんは、そういう速度感でサーバをメンテナンス出来る職員がいることが前提、なのでしょうね。他のOSS IdP実装の速度感は筆者には分からないのですが、状況は似たり寄ったりなのではないかなぁ、という印象。SAML

SAMLという文脈に戻れば、既にクラウドサービスもオンプレミスソリューションも出揃って久しいです。@<fn>{maybe_not_cheap}
今回Shibboleth IdP v2が早々サポート対象外になるという現象は、出来合いの製品に頼ることを一般化するきっかけに（逆に）なったのかなぁと思います。

//footnote[maybe_not_cheap][お安いかは、ともかく。いやというか良く知らないのですが、お安いのですか？]

そう考えると、わざわざこの本を出していながらも「Shibboleth IdPを自力で立てるっていう路線の未来はどうなんだろう？」なんて思わなくもないんですけど……気にせず、この本はSAMLとりわけShibboleth IdPに捧げた本です。

さて本章では、IdP v3に関わる話題で良くあるトピックや、個人的に「マジでー？」と思ったようなことをつらつら書いていきます。


== Q: Shibboleth SP 使ってるんだけど、大変なことが起きたのだな！？

A: 違います。

たまに勘違いされるところらしいので、ここでも記載しておきます。SP（Service Provider）側でShibboleth SPを採用している会社さんは今回のShibboleth IdP v2のEOL（End of Life）について、ほとんど関係しません。

SAMLについて復習しておくと

 * ユーザを認証してその認証情報を提供するIdP（Identity Provider）
 * 提供されたユーザ情報を使って実際のオンラインサービスを提供するSP（Service Provider）

の二手に分かれます。

Shibbolethという名前で、IdPとSP双方に対して完全に別のソフトが提供されていて、今回IdP側が大きく変わっただけです。通信の軸になるSAMLプロトコルが変わったわけではないので、SP側で大きく変わったりしたわけではありません。


=== 属性送信について挙動が変わった？

原則としては「SPがこのIdP変革の騒ぎに巻き込まれることはない」というのが正しいんですが、これを機にSPとIdP間の受け渡し規約が変わるケースはあり得ます。現に、2016年5月27日に行われたNIIオープンフォーラム「学認とShibboleth IdP ver.3」というトラックにおけるNIIの西村健先生の発表で「eduPersonTargetedID」がdeprecated（非推奨）となり、NameIDに取って代わる件が議論されていました。

また、Shibboleth IdPの機能として標準で提供されるようになった、ユーザごとの属性送信の許可機能がSPに副作用を持ち込む恐れはあります。

この機能をIdPが有効化すると「IdPは俺のメアドをSPに送ろうとしてるけど、許さない！」とユーザが決めてしまえたりします。
すると、ID上は同じIdPだったのに、突然あるときにメアドが届いてこない、なんていうことも起こりえます。
SP側を実装している人は、そういうことが突然発生する可能性は、常に意識しておく必要があります。

ただまぁ、これって「uApprove.JP」という学認様が提供している機能を使えばv2時代からあった挙動でもあるので、今更SP側で驚く人がいたらそれはそれでちょっとまずいと思います。


== Shibboleth IdP v2から移行時の各種注意

スムーズに移行できるかどうかは、単純にIdPを運用している組織の事情毎に異なるのは当たり前です。
ただ、共通して検討する基本中の基本事項みたいのはあると思います。

ここでは筆者が思いついた・気づいた点を順に述べていきます。

=== メモリ要件に一応注意

IdP v2は比較的省メモリでもなんとかなっていました。
OS全体で512MBしかなく、スワップアウトも辞さないような環境でも、それなりには動作していました。

一方、IdP v3ではメモリ周りの要件がしれっと大きくなっています。色々学認関係者に問い合わせた結論として、OS全体のメモリは2GB以上、Tomcatに割り当てるメモリは1.5GB以上が推奨だよ、ということがわかりました。本書が発行された段階では既に技術ガイドにも現在はその旨記載されているはずです。@<fn>{thanks_to_nishimura}

//footnote[thanks_to_nishimura][特にNII西村健先生には色々と対応頂きました。感謝いたします。ありがたや、ありがたや。]

低メモリ環境下ですと、v3はIdP本体のエラーメッセージで捉えられない不可思議な挙動や、原因不明のタイミングでのエラーが発生したり辛いです。

著者がハマったことの一つとして、LDAPの接続プールの問題がありました。IdP v3ではLDAP接続の実装としてldaptiveというライブラリを新たに採用しています。このldaptiveの標準設定でLDAP接続をプール（保持）しておくようになっているのですが、低メモリ下では、この接続プールがメモリ圧迫とセットで、酷い挙動を示すようでした。詳細は追えてませんが、低メモリ容量下での接続プールはあまり良いアイディアには思えません。

これにかぎらず、IdP v3は基本的に「メモリをよく食べる、IdP v2とは別のJava製認証ソフトウェア」と考えた方が良い気がします。

うーん、でもま、普通の運用者ならやってますから、ここはハマらないかなぁ……という気もしますね。筆者の「次元」が知れますかね。


=== OSはどれを選ぶべきか


当座凌ぐ目的であればCentOS 6かな、という印象を受けます。RHEL 6でももちろん良いと思います。

 * 本稿執筆時点では学認技術ガイドの案内が CentOS 6 を使っています。国内資料でまとまっている情報は他にはあまり見当たりません
 * CentOS 5のEOLは2017年5月31日で、1年を切っています。
 * CentOS 6 のEOLは2020年ですので、感覚的にもまだ余裕があります。
 * CentOS 7は関連するツールが色々アグレッシブに変わっており、そこで足を取られる可能性があります。

CentOS 7について筆者が勝手に思う主要トラップは systemctl, jouralctl, firewalld, network, apache (2.4) あたりでしょうか。
IdPの更新に際して、常時起動サービスの設定方法やソフトウェアFWの設定などで躓くのは本筋ではない気がします。それは、IdP v3更新とは別の機会にやったら、と思ったりします。Linux環境をいじる場合に新しい環境を体験しておくのは当然としても、IdP v3を入れる段階で敢えて同時にCentOS 7でないといけない理由は見当たりません。

なお、Shibboleth本家や学認のガイドはDebian系（Ubuntu等含む）へのインストールについては概ね何も言及してくれないのですが、TomcatとAppArmorあたりの挙動さえ気をつければDebian系に入らないなんてことはないと思われます。本質的には、ただのサーブレットコンテナに突っ込むwarファイル1つです。

本書で各OSへインストールを試す章を設けようと思ったのですが、時間切れでした。次回にご期待ください。


=== JDKはどれを選ぶべきか

開発本家の推奨はOracle JDK 8のようです。筆者個人としてもOpenJDK 8を推します。ただし議論が別れる部分があるので詳述します。いずれにしても、JDK選択においては認識しておくべき注意点が複数あるように思われます。

Shibboleth IdP v3自体はJava 7でもJava 8でも動作しますし、Oracle JDKでもOpenJDKでも動作サポートがあります。ただし、Java 7を使う場合でも、Oracle JDK 7 は選択してはいけません。Oracleによるサポートが切れています。ですので、Java7に留まりたい場合には、公式にはOpenJDK 1.7一択となるはずです。OpenJDK 1.7のEOLは2018年6月で、Oracle JDK 7よりも長くなっています。

Java 7を選ぶ理由は、筆者が認識する限り1点のみです。attribute-resolver.xml 等にJavaScriptを書いている場合です。このとき、Java 7とJava 8でJava内のデフォルトのJavaScript実行エンジンがRhinoからNashornへ変わった影響で、attribute-resolver.xml内の記述内容も変える必要が発生します。この記述変更が出来ない事情がある場合、Java 7を選択することになります。この議論はShibboleth IdP v2の時代に起きた話と何ら変わりませんが、もし今回久々にIdP環境を更新するのであれば、再確認が必要な事項の一つです。

以上の事情が当てはまらない場合、Java 8に対応する2つの選択肢のどちらかを選ぶ方が良いでしょう。

OpenJDKを使うことのメリットはyumで直接管理できることかと思います。筆者が把握している限りyumと連携するOracle JDKの自動インストーラというのはありませんので、手動インストールの手間がかかるはずです。というか、あったら是非教えて下さい@<fn>{debian_has_it}。

//footnote[debian_has_it][Ubuntuではあった気がします。もちろんメインレポジトリの一部ではありませんが]

OpenJDKについて言えば、CentOS 6.6 ではJava 8に対応するOpenJDK 1.8をインストール可能です。少々蛇足ですが、以前「OpenJDK 1.8はRHELとしてはTechnology Previewの段階にあるので選ぶのは常道とは言えない」という主旨の説明を聞くことがあったので筆者も鵜呑みにしていたのですが、"Red Hat Enterprise Linux 6.6 Release Notes Edition 6"を読む限り"fully supported"とありますので、特にOpenJDK 1.8の使用を控えるべき理由はなさそうです。そもそもサポートの有無を意識する意味が無いCentOSならなおさら、という印象。蛇足ですが、CentOS 7でも"fully supported"というステータスに違いはありません。

ただ、開発元ではOpenJDKに割と不信感があるようで「OpenJDKでバグレポート送ってきたら『それ、OracleのVMでも起こる？』って突っ返すかもしれないぞ」とか書いてあります@<fn>{openjdk_warning}。何があったのかはこの文面からはわかりかねますが……

//footnote[openjdk_warning]["We strongly recommend the use of Oracle's "standard" JVM on all platforms."と述べた上で"You should expect that reports of unexplained problems may be met with a request to reproduce them on Oracle's JVM."とあります（@<href>{https://wiki.shibboleth.net/confluence/display/IDP30/SystemRequirements}）]

というわけでOracle JDK 8が良いのでは、と、とりあえず考えるわけです。

Oracle JDK 8を使用する場合にはEOLは当座気にしなくて良いと思いますが、ただし別の注意点があります。Shibboleth IdP v3のシステム要求では「輸出規制にひっかからない限りは "Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files"を入れておく」というものがあります。日本はこの輸出規制にはひっかからないので、是非インストールしておいてください。このファイルのインストール方法等の詳細は省きますが、単に特定のファイルを書き換えてTomcatを再起動するくらいで終わります。JDKのマイナーバージョンが変わる度に作業する必要があるので、ご注意ください。Oracle JDK を採用するのが面倒くさくなるポイントの一つ、ではあります@<fn>{many_steps_cause_problems}。

//footnote[many_steps_cause_problems][「面倒くさくなる」という表現だとアホっぽいですが、手順書が長いと更新作業時のミス率はやっぱり上がると思います。むしろAnsibleとかでやろうかなぁ……]

"Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files"を入れておかない場合、何が起こるのかというと、要はAES256を始めとした「強力な暗号」が、Oracle JDKのデフォルトでは無効化されていて使えません。これをインストールせずに放置しておいた場合、IdP起動時に警告が出るというだけでなく、今後トラストサークル内で強力な暗号化方法を使った証明書等が出回った時に「この相手と通信するときだけエラーになる」といった不可思議なエラーの原因になるかもしれません。

"Java Cryptography Extension (JCE) Unlimited Strength Jurisdiction Policy Files"が入っているかを事前に超簡易的にチェックする仕組みとして、著者は @<href>{https://github.com/dmiyakawa/java_aes256_check} を作りました。単にAES256で暗号・復号を試すだけなのですが、標準のOracle JDK 8はそれをしようとするだけで例外を発生させてプログラムが異常終了するので、それと分かります。

まとめます。開発本家の推奨はOracle JDK 8のようです。筆者個人としてもOpenJDK 8を推します。ただし議論が別れる部分があります。いずれにしても、JDK選択においては認識しておくべき注意点が複数あります。


=== TomcatとJetty、どちらを選ぶべきか

結論から。Tomcat 8がお薦めです。

本章執筆現在、Shibboleth IdPの開発元WikiではJetty 9系を推奨しているのですが、個人的にはJetty + Shibboleth IdP v3という構成をとって期待通りにインストールしきれたことがありません。筆者の無力を嘆くしかないですが、本当に何故かうまくいかないんですよね……。

またJettyでは（Tomcatでは使える）ajpのサポートがなくなったらしく@<fn>{ajp_dropped_on_jetty9}、リバプロ周りもなんかおかしいとか。ちょっと追えてませんが……とにかく良いニュースは聞きません。

//footnote[ajp_dropped_on_jetty9][@<href>{https://wiki.eclipse.org/Jetty/Howto/Configure_AJP13}に "Support for this feature has been dropped with Jetty 9. If you feel this should be brought back please file a bug. "とあります。]

Tomcatは7以降で動作するとあり、その場合、推奨はTomcat 8になります。IdP v2の時代もTomcat系で、設定方法にも十分な類似性があります。つまり「楽」です。

あまり知的な論理ではないですが、Jetty系で必死に頑張ってだめで、Tomcatに変えたら一瞬で動作した、なんてことがあって以来、この点では筆者はTomcat一択を推すようになりました。今のところ学認のガイドもTomcatを使用するガイドを公開していますので、まぁ、大丈夫でしょう。

特にサーブレットコンテナレベルで高度なことをしたい場合や、Jettyのサーブレットコンテナ自体としての優秀さを買われている方においては、是非積極的にJetty 9 + IdP v3の組み合わせをアピールしていただければと思ってます。

Apache Tomcat系を使う場合、公式にはTomcat 8が強く推奨されているサーブレットコンテナです。ただ、Tomcat 7でも（バグがあるものの）動作はするようで、Tomcat 7を採用していたりする資料もあります。本質的な設定の違いはあまりなさそうな印象です。Shibboleth IdP v3を入れるため「だけ」にTomcatを使っているのであれば、Tomcat 8を使うのでもよし、現時点での学認技術ガイドのようにTomcat 7を使うのも、長いものに巻かれている感じがするので良いのかもしれません。

念のため申し添えておくと、Tomcat 6ではIdP v3は動作しないようです。v2時代がTomcat 6なのでそのまま動作して欲しいと期待してもうまくいきません。


=== 設定の移行はスムーズか

IdP v3インストール時にインストーラがIdP v2を検出すると、その設定の一部をIdP v3に移行してくれます。ただ「IdP v2のXML文法を解釈して等価なIdP v3の新しい設定に書き換えてくれる」わけではありません。そこまで親切ではありませんでした。ちぇ。

基本的には、一部の設定XMLをそのままコピーして、IdP v3本体は「XMLの構造がv2っぽかったらv2っぽく解釈する」ような感じで動作します。もう少し具体的に説明すると、基本的に attribute-resolver.xml, attribute-filter.xml は、v2のままで受け入れます。その上で、IdP v3はXMLにv2の文法が使われているようならば、なるべくv2流に解釈しようとします。よって、その辺りの設定はそのままでも「ほぼ」動きます。

この点で、IdP v3の技術者は移行難易度が低くなるように努力した節がいくらか見受けられます。IdP v2で運用者自身が「自分が何をやっていたのか」を正確に把握できていれば、移行難易度がなるべく下がるよう、それなりに丁寧に設計されている印象です。ただし、IdP v3インストール後、ノータッチでv3が動作するようになることは通常ありません。

例えば、LDAPの設定については少し「いじる」必要が出てきます。IdP v2では（おそらく）独自にLDAP接続周りを実装していたような感じでしたが、IdP v3ではldaptiveというライブラリを使っています。基本的な設定については同等な記述ができますが記述場所としてldap.propertiesというものが追加されました。基本的な接続設定に加えて、ldaptiveに関する設定を追加で行うことが出来ます。LDAPsをいわゆる「オレオレ証明書」経由で行っていた場合、v2ではJavaに対してkeytoolで証明書を追加する処理が必要でしたが、IdP v3では設定ファイルに記載すれば良いようです（十分な検証が出来ていないので必要に応じて追加調査してください）。雑に言えば、移行できる設定はすんなり移行するのだけど、新しいところがないわけじゃない、ということです。

細かい点については、組織ごとの事情でさらに異なってくるでしょう。冗長構成に関してはv3の方が簡単になっている側面もあるようで「何もやらなくても冗長構成の挙動が改善した」という事例もあるようです@<fn>{keio_is_good}。一方、例えばv2向けの独自プラグインを実装していた場合にはそのためのケアが必要かもしれません。


//footnote[keio_is_good][@<href>{http://www.nii.ac.jp/csi/openforum2016/track/day3_4.html} 内、細川達己先生の資料]


=== 移行はスムーズ……ただしたくさんの警告メッセージ

v3はv2の文法を使っていると判断したファイルをそのようにあつかったり、v3で仕組みが変わった設定を無視することで移行を実現します。XMLの中身を解釈して新しい文法に書き換えてくれたり……なんてことはしません。

言い換えると、動いてるのだけど「ゴミ」が大量に設定に混じった状態でv3が起動します。

v3は動作します。ただし、運用者を攻め立てるようにログに「WARNING」が出まくります。「これは古い書き方だ直せ！！」というのがたんまりと。

これは開発者側の意図通りの動作のようです。@<href>{https://wiki.shibboleth.net/confluence/display/IDP30/UpgradingFromV2} を見ると"Next Steps"にそのように書かれています。要は「なるべく長いダウンタイムが起こらないよう、素早くIdP v2からIdP v3移行できるように実装頑張ったけど、古い設定については警告を出しておくので、IdP v3に移行できたら、そのあと時間を取って順次設定を直していってくりゃれ？」という意図のようです。

規模が大きい組織ですとそういう段階を踏まないと、IdP v2 EOLまでに間に合わないという事情もあり得ます。その場合には「移行してから順次設定を書き換えていく」アプローチを採るのは十分妥当な選択肢と思われます。一方、移行前後の設定でどこを変えれば良いのかわかっていて、検証する時間さえあれば、IdP v2の設定をIdP v3に初めから書き直す、というのも妥当な判断じゃないかと思われました。そうしないと、いつまでたっても本物の警告とv2の亡霊の見分けをつけられない気もします。

ま、組織次第じゃねーの。


== ところで IdP v3は、Version 3.2.1 で「安定」したのだろうか

本章ではVersion 3.2.1へ移行することを想定して書いています。メーリングリストや他の資料を眺めていると、少し前のバージョンにはインストール時の設定ファイル自体に微細なバグが入っていたりと色々「アレ」な感じを受けたのですが、筆者が自分で扱っている範囲で言えば、3.2.1はそれなりにトラブルが少ないという意味で「安定」している印象を受けます。先行した方々のノウハウのおかげ、という面もあります。

ここで「今後、v3で破壊的な変更が行われる可能性はないか」という疑問が浮かびます。安定し続けてくれればもちろん嬉しいのですが、Version 3.2.1までの事情をチラ見する限りですと、開発者再度に少し「拙速」な印象を持たないでもなかったり……。

一節には、開発元は Version 3.3のリリースに向けてアクティブに開発を進めているとのことです。言い換えると、そこでまた「うわー！」という変更が行われる可能性はゼロではない、ということです。

「v2からv3に移行した！」と安心していたのもつかの間、Version 3.3が破壊的変更とセキュリティ修正がセットになってリリースされる……なんていう事態もある「かも」しれません。

と言っても、IdP v2が来月終わるわけですから、v2で待機する、という選択肢はもう現時点ではないと考えるしかありません。ごちゃごちゃ言っても仕方ないのです……


== お勧めの情報源

Shibboleth IdP 3の情報源はそこまで潤沢とは言えない部分がありますが、有志の方々の積極的な情報共有によって急速に道路が舗装されている印象です。

以下に、主に「学認」事業の周囲の情報を元にして観測していると、以下の一連の情報源が役に立ちました。

 * @<href>{https://www.gakunin.jp/ml-archives/upki-fed/}
 * @<href>{http://www.nii.ac.jp/csi/openforum2016/track/day3_4.html}
 * @<href>{http://memo.itc.keio.ac.jp/blog/?p=474}
 * @<href>{https://www.gakunin.jp/ml-archives/upki-fed/}
 * @<href>{https://wiki.shibboleth.net/confluence/display/IDP30}
 * @<href>{https://meatwiki.nii.ac.jp/confluence/display/GakuNinShare/Shibboleth+IdP+3}
 * 学認技術ガイド

なお「お勧め」はしませんが、筆者がメモ代わりに使っているページは @<href>{https://mowa-net.jp/wiki/ShibbolethIdP3} です。
同ページにエラーとその理由の対応を書いたりしておくことがあります。

