= SAMLって何

本章ではSAMLについて説明してみます。まずSAMLから離れて、SSO（Single Sign On）とそのメリットを考え、SSOの一手法であるSAMLが、なぜ代替方法がある中で特定の界隈で使われ続けるかを説明します。実際に使う機会がなくても「あー、存在理由があるのね」と分かっていただければ幸いです。


== Single Sign ON

GoogleのサービスでGmail利用中にGoogle Calendarを開くと、Gmailのログイン情報を使いまわしてくれます。もし仮にGmail, Google Calendar, Google Spreadsheet, Google Music, その他全部のサービスでその度にユーザ名とパスワード（とOTP）を聞かれたらめんどくさくてたまりません。

Googleは一社で上記のサービスを提供している手前、サービス間でユーザのIDを共有出来ます。ですので、あるブラウザで一度ログインしたら、そのログイン情報を複数のGoogle内サービスで使いまわすのは簡単です。これがSingle Sign On。一回ログイン（サインオン）したら後はそのIDを各サービスで使い回すということです。

Google社内であればIDの共有方法はいかようにも出来るでしょうが、これを複数の異なるサービス母体に対して行う場合には、何らかの「プロトコル」を考える必要があります。この時、プレイヤーは大きく分けると以下の2つに分かれます。

: Service Provider（SP）
   実際にサービスを提供する側。Identity Providerに認証を要求し、認証が成功時にはそのユーザ情報（の一部）を受け取り、サービスを提供する。Service Providerという表現はSAML用語。Identity Providerに依存（Rely）するので、OpenIDなどではRelying Partyという表現になっているが、指したい対象はおおまかに同じ。
: Identity Provider（IdP）
   ID（ユーザ情報）をサービスに提供する側。ユーザを認証する。認証方法はIdentity Providerの一存だが、よくあるのはパスワード。最近はいわゆる「他要素認証」等で複数チェックを入れて初めて「このブラウザでアクセスしてきているのはAさんだよ」と「認証」してくれる。Service Providerと同じくこれもSAML用語で説明している。OpenIDではID Providerで略称は同じくIdP。

この2種類のプレイヤーの間でどうユーザの秘密情報をやりとりするかを考えなければなりません。

一般的に公開されているWebサービスでは、Open ID（Connect）・OAuth2がこの類の要請に応える形で利用されています@<fn>{authn_not_authz}。

//footnote[authn_not_authz][正確にはOAuthは認証の仕組みじゃなくて認可の仕組みですが、詳細はWeb等で検索して調べていただくほうが正確です。なんだってそれならこの章要らないだって？気にしてはいけない……]

== SAMLを採用する理由

Web上で公開されるサービスでは概ねOpen IDやOAuth系統のプロトコルが使われる一方、特にビジネス界隈ではSAMLの存在感が大きくなります。OSS版の「Community」バージョンに対して、「Enterprise」なんていう名のついた商用サポート付きバージョンで、高々と「SAML対応」が入っていたりするのを目にする機会があるかもしれません@<fn>{owncloud}。

//footnote[owncloud][筆者直近の例ですとownCloudがこのパターンに当てはまります]

OpenIDやOAuthでは、ID情報を与える相手（Service Provider）が信頼のおける相手なのかを事前にチェックすることについて、あまり厳密ではありません。そもそもWeb上で公開されるサービス間の連携を前提とした仕様であった手前、上の用語でいう「Service Provider」が受け取るIDが本当に何らかの形で有効で、信頼できるユーザなのかどうかが当初から中心的な話題ではなかったようです。

Googleのアカウントって簡単に一人で複数作れたりしますよね。「Googleでログイン」ボタンを設置したサービス（SP）はGoogleをIdPとして使うことを選んだことになりますが、そのアカウント自体は当初あまり信用出来ないことは、意識しておく必要があります。つまり、OpenID等で連携したサービス側は、意識的・無意識的に関わらず、「このユーザはbotの疑いもかなりあるよなぁ」と思いながらサービスを構築する必要がありますし、重要なリソースを提供する前には、サービス（SP）側でさらにもう一層チェックを入れる必要があります。そもそも「Googleでログイン」ボタンを設置する際に、GoogleはIdPとしてSPを厳しく事前審査したりはしません。もちろん悪意のあるサービスと分かればすぐさま止められるように、認証トークン発行の手続き等を含めていますが、基本的にはオープンな形で連携でき、サービス（SP）がどうそのIDを使うかについてのチェックはある意味「諦め」ています。ユーザは最終的に自己責任で「Googleでログイン」ボタンを押すことになります。調べていると「Webのためのプロトコル」という表現がありましたが、まさにその通り。自由にサービス間連携を促すのがOpenID・OAuthの基本的な背景にある思想ではないかと思います。

SAMLの根本的な考え方はこういう考え方とは異なります。どちらかと言えば根本にあるのは「社内（組織内）にサービスを導入するんだけど、楽にログイン管理できないかな」といった発想です。

社員の情報を収めるLDAPやActive Directoryを外部サービスに晒すわけがないように、SAMLのIdentity Providerもそんな形で無防備に外部に晒したりしません。その代わりに、事前に信頼する相手方を厳選して契約状態を管理します。SAMLのプロトコルレベルで言えば、一つのXMLに協力関係を結ぶIdPとSPの情報を詰め込んで共有します。これをSAMLではトラストサークル（信頼の環、Circle of Trust）と呼びます。Webサービスの例とは違って、トラストサークル内に入るには相応に「信頼に足る」と信じられた上で、通常は何らかの（印鑑が必要なレベルで）契約を結ぶことになります。あまり読まれることのないWebサービスの利用規約よりは、もう少ししっかり「契約契約している」前提がSAMLプロトコルにはあるように感じられます。

SAMLを活用している事例の一つとして、Identity Providerとしての大学（や学術系組織）と各種のService Providerを結びつける「学認」という枠組みがあります。「学認」についての説明は今回は置いておきますが、この「信頼に足るIdentity ProviderとService Provider」を「学認」の参加する大学（主にIdentity Providerとして）や企業（主にService Providerとして）をチェックしています。@<fn>{gakunin_metadata}

//footnote[gakunin_metadata][「学認」のトラストサークル自体は公開されています（@<href>{https://metadata.gakunin.nii.ac.jp/gakunin-metadata.xml}）。XMLの読み方は省略しますが、Identity Providerとしての大学と、そこにサービスを提供するService Providerとしての事業者のメタデータ一覧があるわけです。]

SAMLにおいては、Identity Providerに登録されているユーザ情報は「確かなもの」であることをIdentity Providerが保証します。Service Providerはその保証に基づいて、より「確かな」サービスを提供することが出来るようになります。「学認」の例で言うなら、Identity Providerからくるユーザというのは、それぞれの大学に在籍している・関係していることが確かなユーザです。大学名とユーザ属性も当然確かなので、Service Providerである企業側は、それを前提に例えば「学生さんには無料でこのサービスを提供しまーす」といった特別なサービス出来ます。あるいは「この大学からは年間契約料をもらってるので、そこから来たユーザは有料の電子ジャーナルを無料で閲覧できます」なんていう選択も、理屈上可能となります。

会社でSAMLを使う場合も似たようなものです。「御社のEnterprise版のライセンスを買いましたので、アクセスさせてください」と申請して、企業側が管理するトラストサークルに含めてもらうわけです。なおこの場合、企業側が持っている「トラストサークル」の情報を（学認のように）公開しておく必要はありません。

== 本章のまとめ

SAMLの存在意義について書いてみました。筆者なりに正しいと信じて書いてますが、なにせSAMLに限らずセキュリティ界隈は細かいところで落とし穴が多い……というわけで、もし説明が誤ってたりいたり、不適切な論理飛躍等がありましたら、@<href>{https://github.com/dmiyakawa/TechBookFest2016-SAML-Book}にIssue登録やPRしていただけると助かります。次バージョンでは修正してお送りします。

