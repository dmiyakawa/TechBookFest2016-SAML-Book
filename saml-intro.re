= SAMLって何だっけ？

本章では、筆者のSAML復習を兼ねてSAMLそのものについて説明します。実際にSAMLを使う機会がない方にも、その意義がなんとなく分かっていただければ幸いです。

最初にまずSAMLから離れてSingle Sign On（SSO）とそのメリットを考えます。その上で、SSOの一手法であるSAMLが、類似技術がある中でなぜ特定の界隈で使われるのかを説明します。

== Single Sign-On

GoogleのサービスでGmail利用中にGoogle Calendarを開くと、Gmailのログイン情報を使いまわしてくれます。仮にGmail, Google Calendar, Google Spreadsheetなど、その他すべてのサービスでユーザ名とパスワード（とOTP）を聞かれたらめんどくさくてたまりません。

Googleは一社で上記のサービスを提供しているので、社内での調整を行えばサービス間でユーザの属性情報を共有出来るようになります。「属性情報」というのは要するに「ユーザID」や「氏名」といった、特定のユーザについての情報です。とりあえずGoogleへのアカウント登録時に入力している情報などを想像すれば大丈夫です。

あるブラウザで一度ログインしたら、「ログイン出来た」という事実やユーザの属性情報を複数のGoogle内サービスで使いまわすのは（比較的）簡単です。単に同じユーザ名とパスワードを使いまわせるだけでなく「一度ログインしたらそのログイン情報をそのまま別のサービスで引き継げる（再入力せずに済む）」のがSingle Sign-Onと呼ばれる仕組みの良さです。

Googleのように一社が複数のサービスを提供するのではない場合、特にユーザの属性情報を管理している側と、サービスを提供したい側が別の組織・会社である場合、話は複雑になります。異なる組織間で安全に、ユーザの属性情報の受け渡しを行う必要があり、ログイン（Sign-On）した状態を、異なる企業のサービス間で維持する必要が出てきます。

例として、ある会社（A社）が、社員に次の3つのオンラインサービスを社内アカウントを使って提供したいと考えたとしましょう。

 * X社が提供する、社内情報共有のためのグループウェアサービス
 * Y社が提供する、社員の自己学習を支援するためのオンライン教育サービス
 * Z社が提供する、電子ジャーナルダウンロードサービス

A社は社内アカウントを管理しているはずですが、サービス自体は別の会社の商品です。A社はそれら異なる会社とそれぞれにライセンス契約等を結ぶことになります。そして、X社・Y社・Z社のサービスとドメインをまたがった認証連携を行います。

このとき、X社・Y社・Z社のサービス間でSSOを実現するにはどうすれば良いでしょうか。A社内で、社内アカウントをActive DirectoryやLDAPといったディレクトリサービスを用いて一元管理しているだけでは十分ではありません。ユーザ名とパスワードを使いまわせても、X社のサービスにログイン後、Y社のサービスにログインする際に、同じユーザ名とパスワードを再度入力し直すことになります。上記のGoogle一社が提供するサービスでのログインの扱いと比べると不便です。

理想はSSO出来ること、つまり、X社のサービスを利用する際にA社のアカウントでログインしたという情報をブラウザなどが覚えておき、Y社のサービスを利用する際に何らかの形でそのログイン状態を正しく使いまわせる状態です。そのためには、3つのサービス間でのSSOを実現する場合には、ブラウザ・HTTPのレベルでID連携を行えるプロトコルが必要になります。

以上のように、異なる組織間でID連携を行う議論を簡略化すると、サーバは大きく分けて2つの役目に分かれます@<fn>{about_ap}。

: Service Provider（SP）
   実際にサービスを提供する側。Identity Providerに認証を要求し、認証が成功時にはそのユーザ情報（の一部）を受け取り、サービスを提供する。Identity Providerに依存（Rely）するので、Relying Partyという表現が使われることも多いが、本稿ではSAML用語のSPを使う。
: Identity Provider（IdP）
   ユーザの属性情報をサービスに提供する側。ユーザを認証する。認証方法はIdPの一存で決まるが、SAMLではSPはどのような方法で認証されたかの情報を受け取れることになっている。当然ながら、よくあるのはパスワード認証。SPと同じく、IdPもSAML用語だが、他プロトコルでもIdPという表現は目にする。

前述の例ではA社がIdP、X社・Y社・Z社がSPとなります。この2種類のプレイヤーの間でどうユーザの秘密情報をやりとりするかを決めなければなりません。

//footnote[about_ap][IdPに属性情報を提供するプレイヤーを「Attribute Provider（AP）」として3つに分けて議論するケースも良くありますが、本書では省略してIdPの一部としています。]


== SAMLが採用される理由

ユーザ登録が自由に行えるようなWebサービスのID連携では、OpenID（OpenID Connect）やOAuth@<fn>{authn_not_authz}系統のプロトコルが広く使われることが多いです。一方、特にビジネスが関わるサービスではSAMLの存在感が大きくなります。商用ソフトウェアの紹介で、下位グレードのライセンスとEnterpriseライセンスの機能比較欄にSAML対応の有無が書いてあることもあります。

//footnote[authn_not_authz][正確にはOAuthは認証の仕組みじゃなくて認可の仕組みですが、IdPとして動作することはします。正確な議論はここでは割愛……]

執筆時点での筆者の印象では、OpenIDやOAuthを積極採用するのは一般利用者が自由にアカウント登録出来るような公開のWebサービスです。そういったサービスでは、ID情報を与える相手（SP）が信頼のおける相手なのかを事前にチェックすることについては、あまり厳密ではありません。また、SPが受け取るユーザIDはIdPから来たことまではわかるとしても、信頼できるユーザなのかどうかまでは分かりません。例えば一人で複数のアカウントを作れたりするサービスがよく有りますので「お一人様1回だけ」みたいな制約に実効性を持たせるには、SP側で工夫が必要です。

「（IdP名）でログイン」ボタンを設置したサービス（SP）は、そのIdPを使うことをSPとしてユーザに許可したことになります。大抵の場合、サービス設計者は、そのIdPのアカウントでログインしたユーザ自体を信用出来ない前提でサービス設計を考える必要があります。ユーザが善意の利用者である可能性のみならず、攻撃者やボットであることも想定する必要があります。重要なリソースを提供する前には、SPでIdPの認証に加えてもう一段階チェックを入れる必要があるかもしれません。

またIdP側から見たSPの選別も、ある意味で「雑」です。ID連携を許す際、OpenID・OAuth等におけるIdPは相手SPを厳しく事前審査したりしません。もちろん悪意のあるサービスと分かればすぐさま連携を止められるようには準備しておくでしょうが、基本的にはかなり自由に外部サービスとID連携出来るように、ID連携機能を提供していることが多いようです。OpenIDやOAuthを採用しているID連携では、以上の事情を理解した上でユーザも振る舞う必要があります。具体的に言えば、「〜〜でログイン」ボタンを押し、ID連携を介したSP側サービスを利用するのは、ユーザの自己責任となります。妙なサービスとID連携してしまうと、割とあっさり個人情報が抜き取られたりしてしまいますので、ユーザは自ら注意してSPを選択する必要があるのです。

「Webのためのプロトコル」という表現を目にしたことがありますが、まさにその通り。自由にサービス間連携を促すのがOpenID・OAuthの思想ではないかと思います。

一方、SAMLの根本的な考え方の根本にあるのは「社内（組織内）にサービスを導入するんだけど、楽にログイン管理（SSO）できないかな」という発想です。例えば前述の「A社がX社・Y社・Z社のサービスを導入するケース」が当てはまります。

社員の情報を収めるLDAPやActive Directoryを外部サービスに無防備に晒す会社は一般的ではありません。それと同様で、SAMLのIdPを外部サービスに対して無防備に晒すことも、通常ありません。外部サービスが「ID連携したい」とHTTPリクエストを送ってきても、基本的には全部お断りです。

その代わりにIdP運営側は、事前に信頼する相手サービスをチェック・選別し、そのサービスと明示的な契約を通すなどして「信頼」することを宣言して、初めてID連携を許可します。IdPがSPを相応に「信頼に足る」相手と判断しなければ、IdPはID連携を行わなくて構いません。逆も然りで、SP運営者側も同じように信頼に足るIdPを管理し、サービス提供するIdPを限定出来ます。

つまりSAMLでは、双方がお互いを明示的に信頼して初めて、SP・IdP間のID連携が可能となります。信頼したIdP・SPの関係を、SAMLではトラストサークル（信頼の環、Circle of Trust）と呼びます。この基本的な仕組みにより、IdPに登録されているユーザ情報は確かなものであることをIdPが保証し、SPはその保証に基づいて、より確かなサービスを提供することが期待出来るようになります。

一言でまとめれば、OpenIDやOAuthはWebから進化した経緯があり、SAMLはビジネスでの2社間の認証連携から進化した経緯があります。その経緯があるため、Web上でSAMLプロトコルについて見ることは少なく、会社間連携では逆にSAMLを見る機会が多くなります。

なお技術的には、OpenID Connect等のプロトコル仕様の進化によって、これら2系統の技術に本質的な差はそれほどなくなってきているようです。正しく実装した実装で正しく設定すれば、OpenID Connect等でSAMLが提供するようなトラストサークルベースの閉じた認証連携を実現することは可能とのことです。将来SAMLの代わりに他のWeb由来の技術が優先して採用されるようになる可能性も十分あり得るでしょう@<fn>{problems-exist}。

//footnote[problems-exist][OpenID・OAuth界隈では正しく実装されていない実装が大手IdP・SPでも多くて困る、というお話も聞くので、期待するほどすんなりそうなるとも思えないところがあります。]



== SAMLを使ったサービスの例: 学術認証フェデレーション（学認、Gakunin） ==

ここで、SAMLを広く活用している国内事例の一つとして「学術認証フェデレーション」（学認、GakuNin）を紹介しておきます。これは国立情報学研究所（NII）の事業の1つで、IdPとしての大学（や学術系組織）とサービスを提供するSPとしての企業等を結びつける全国共通のトラストサークルを構築する事業です。

「学認」のトラストサークルにおいては、IdPでの認証を経由してSPを訪れるユーザは、その大学に在籍している・関係していることを大学が保証しているユーザとなります。大学名とユーザ属性も当然確かなはずですので、SPである企業側は、それを前提に例えば「学生さんに限って無料でこのサービスを追加で提供します」といった特別なサービスも提供出来ます。あるいは「この大学からは年間契約料をもらってるので、そこから来た学生さんは有料の電子ジャーナルを無料で閲覧できます」なんていう判定も、SAMLを介することで可能となります。

筆者は「学認」の関係者ではないので憶測ですが、同事業では、トラストサークルを広げつつIdP・SP双方の運営レベルを引き上げることを通じて、ID連携技術の浸透とID連携を必要とする運用母体のレベル向上を目指しているように見えます。結果として、トラストサークル運用に関する社会全体の理解度の向上も促せる……とまで考えているかは分かりませんが、そういう効果は見込めると思います。

今後「電子政府」のようなお話が国内で本格化する際にも、SAMLのようなトラストサークルに基づいたID連携の考え方は重要になってくるでしょう。

以上、SAMLの存在意義がなんとなく分かっていただければ幸甚です。@<fn>{correct_me}

//footnote[correct_me][もし説明が誤ってたりいたり、不適切な論理飛躍等がありましたらお知らせください。]

===[column] 「ユーザの属性情報」って表現、わかりづらくない？

SAMLに限らず認証（Authentication）あたりを勉強し始めた頃に筆者も「ぞ、ぞくせいじょうほう？」と当惑した記憶があります。
また実際に、初版では「ユーザIDを受け渡す」みたいなニュアンスで説明していました。
ただその説明だと、認証連携の便利さが分からなくなるかも、という指摘もあるため、あえてこの表現で説明しています。

認証連携の場合、IdPからSPへ「ユーザID」を渡す必要がない、もしくは渡すべきではないケースもあります。
例えば大学と連携している電子ジャーナルダウンロードサービスの場合、
SPとしては「ちゃんとお金を払っている大学の学生であること」という事実だけが重要で
具体的に誰がどのコンテンツを見たかは、むしろ直接把握したくないかもしれません。
欲しいのは「ユーザID」ではなく、そのユーザが「提携大学のIdPで認証できたこと」と「学生か否か」だけです。
学認で言うなら、eduPersonAffiliationという名前の属性情報が「student」かどうかをチェック出来れば良く、
uid、givenName、displayNameのような属性情報はSPとして見る必要が無いのです。
あるいは個人情報保護の観点からすれば積極的には見たくないとまで思うかもしれません。

===[/column]


